# -*- coding: utf-8 -*-
"""CNN Image Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14-IzqOtFMami_0gGNcborfzmuuTHjjry
"""

!pip install --upgrade pip

!pip install opencv-python matplotlib

import tensorflow as tf
import os

gpus = tf.config.experimental.list_physical_devices('GPU')
gpus

len(gpus)

for gpu in gpus:
  tf.config.experimental.set_memory_growth(gpu, True)

from google.colab import drive
drive.mount('/content/drive')

data_dir = '/content/drive/MyDrive/data'
os.listdir(data_dir)

import cv2
import imghdr
from matplotlib import pyplot as plt

data_dir

image_exts = ['jpg', 'jpeg', 'png', 'bmp']

image_exts[2]

#os.listdir(os.path.join(data_dir, 'happy_people'))

img = cv2.imread(os.path.join(data_dir, 'happy_people', '_106067414_2.jpg'))

img

type(img)

img.shape

plt.imshow(img)

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show

for image_class in os.listdir(data_dir):
  for image in os.listdir(os.path.join(data_dir, image_class)):
    image_path = os.path.join(data_dir, image_class, image)
    try:
      img = cv2.imread(image_path)
      tip = imghdr.what(image_path)
      if tip not in image_exts:
        print("Image is not in the extensions list {}".format(image_path))
        os.remove(image_path)
    except Exception as e:
      print("Issue with image {}".format(image_path))
      # os.remove(image_path)

tf.data.Dataset??

tf.keras.utils.image_dataset_from_directory??

import numpy as np
from matplotlib import pyplot as plt

data = tf.keras.utils.image_dataset_from_directory(data_dir)

data_iterator = data.as_numpy_iterator()

data_iterator

# Get another batch from the iterator
batch = data_iterator.next()

batch[1].shape

len(batch)

batch[0].shape

# Class 0 = Happy People
# Class 1 = Sad People
batch[1]

fig, ax = plt.subplots(ncols=4, figsize=(20, 20))
for idx, img in enumerate(batch[0][:4]):
  ax[idx].imshow(img.astype(int))
  ax[idx].title.set_text(batch[1][idx])

data = data.map(lambda x, y: (x/255, y))

scaled_iterator = data.as_numpy_iterator()

batch = scaled_iterator.next()

batch[0].max()

batch[0].min()

fig, ax = plt.subplots(ncols=4, figsize=(20, 20))
for idx, img in enumerate(batch[0][:4]):
  ax[idx].imshow(img)
  ax[idx].title.set_text(batch[1][idx])

len(data)

train_datasize = int(len(data)*.7)
val_datasize = int(len(data)*.2)+1
test_datasize = int(len(data)*.1)+1

train_datasize

val_datasize

test_datasize

train_datasize + val_datasize + test_datasize

train = data.take(train_datasize)
val = data.skip(train_datasize).take(val_datasize)
test = data.skip(train_datasize+val_datasize).take(test_datasize)

len(test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

MaxPooling2D??

model = Sequential()

model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D())

model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# tf.optimizers.          (Choose other optimizers if needed, but in this, using "adam" optimizer.)

model.compile('adam', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])

model.summary()

logdir='logs'

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

hist = model.fit(train, epochs=20, validation_data=val, callbacks=[tensorboard_callback])

hist.history

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

pre = Precision()
re = Recall()
acc = BinaryAccuracy()

for batch in test.as_numpy_iterator():
    X, y = batch
    yhat = model.predict(X)
    pre.update_state(y, yhat)
    re.update_state(y, yhat)
    acc.update_state(y, yhat)

print(pre.result(), re.result(), acc.result())

print(f'Precision:{pre.result().numpy()}, Recall:{re.result().numpy()}, Accuracy:{acc.result().numpy()}')

data_dir = '/content/drive/MyDrive/data'
os.listdir(data_dir)

img = cv2.imread(os.path.join(data_dir, 'test', 'happy_test2.jpg'))

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show

import cv2
import matplotlib.pyplot as plt

img = cv2.imread(os.path.join(data_dir, 'test', 'happy_test2.jpg'))

# Check if the image was loaded correctly
if img is not None:
    # Convert the BGR image to RGB
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    # Display the image
    plt.imshow(img_rgb)
    plt.show()
else:
    print("Error loading the image.")

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

resize = tf.image.resize(img_rgb, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

resize.shape

np.expand_dims(resize, 0).shape

yhat = model.predict(np.expand_dims(resize/255, 0))

yhat

if yhat < 0.5:
  print("Predicted class is Happy.")
else:
  print("Predicted class is Sad.")

import cv2
import matplotlib.pyplot as plt

img = cv2.imread(os.path.join(data_dir, 'test', 'sad_test2.jpg'))

# Check if the image was loaded correctly
if img is not None:
    # Convert the BGR image to RGB
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    # Display the image
    plt.imshow(img_rgb)
    plt.show()
else:
    print("Error loading the image.")

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

resize = tf.image.resize(img_rgb, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

yhat = model.predict(np.expand_dims(resize/255, 0))

yhat

if yhat < 0.5:
  print("Predicted class is Happy.")
else:
  print("Predicted class is Sad.")

yhat

from tensorflow.keras.models import load_model

model.save(os.path.join(data_dir, 'models','imageclassifier.h5'))

new_model = load_model(os.path.join(data_dir, 'models','imageclassifier.h5'))

new_model

yhat_new = new_model.predict(np.expand_dims(resize/255, 0))
if yhat_new < 0.5:
  print("Predicted class is Happy.")
else:
  print("Predicted class is Sad.")

